import logging
import random
import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta
from telegram.ext import MessageHandler, filters

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–≤ –ø–∞–º—è—Ç–∏)
users_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
def initialize_user(user_id, username):
    if user_id not in users_data:
        users_data[user_id] = {
            'username': username,
            'balance': 0,
            'last_tapnut': None
        }
def initialize_user(user_id, username):
    if user_id not in users_data:
        users_data[user_id] = {
            'username': username,
            'balance': 0,
            'last_tapnut': None,
            'bonuski': 0  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–∫
        }
        

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/me - –∏–Ω—Ñ–æ –ø—Ä–æ —Ç–µ–±—è\n"
        "/tapnut - —Å–æ–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/vivod - –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏\n"
        "/help - –ø–æ–º–æ–∂–µ—Ç —Å —á–µ–º —É–≥–æ–¥–Ω–æ\n"
        "/leaderboard - –ª–∏–¥–µ—Ä–±–æ—Ä–¥\n"
        "/casino - –∏—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É\n"
        "/casino_1to10 - —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏ –∑–∞–±–µ—Ä–∏ 100–•\n"
        "/casinoWIN - —Ä—É–ª–µ—Ç–∫–∞ –∑–∞ 30 $KRISA –∏–ª–∏ –∑–∞ –±–æ–Ω—É—Å–∫—É. –∑–∞–±–µ—Ä–∏ 10–• \n"
        "Forbes bot rating: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è (5/5)"
    )

# –ö–æ–º–∞–Ω–¥–∞ /me
async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    balance = users_data[user_id]['balance']
    bonuski = users_data[user_id]['bonuski']  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–∫

    await update.message.reply_text(
        f"@{username}, —É —Ç–µ–±—è {balance} $KRISA –∏ {bonuski} –±–æ–Ω—É—Å–æ–∫.\n\n"
        "–°—ã–≥—Ä–∞–π –≤ /casino –∏–ª–∏ –≤ /casinoWIN!\n\n"
        "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!" 
        
        "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /start"
    )

# –ö–æ–º–∞–Ω–¥–∞ /tapnut
async def tapnut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    now = datetime.now()
    last_tapnut = users_data[user_id]['last_tapnut']

    if last_tapnut is None or now - last_tapnut > timedelta(hours=24):
        reward = random.randint(1, 30)
        users_data[user_id]['balance'] += reward
        users_data[user_id]['last_tapnut'] = now
        await update.message.reply_text(f"@{username}, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {reward} $KRISA! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üíµ" "‚ùóÔ∏è–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /start" )
    else:
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ..." "‚ùóÔ∏è–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /start")

# –ö–æ–º–∞–Ω–¥–∞ /vivod
async def vivod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("—Å–∫–æ—Ä–æ...")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–ø—Ä–æ—Å—ã? —Å–ø—Ä–æ—Å–∏ —É @fleo431")

# –ö–æ–º–∞–Ω–¥–∞ /leaderboard
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    leaderboard_text = "–õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n"
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['balance'], reverse=True)
    
    for i, (user_id, user_data) in enumerate(sorted_users, 1):
        leaderboard_text += f"{i}. @{user_data['username']} ‚Äî {user_data['balance']} $KRISA\n"
    
    await update.message.reply_text(leaderboard_text)

# –ö–æ–º–∞–Ω–¥–∞ /casino
async def casino(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    balance = users_data[user_id]['balance']
    
    if balance > 0:
        chance = random.random()
        if chance <= 0.5:  # 50% —à–∞–Ω—Å —É–¥–≤–æ–∏—Ç—å –±–∞–ª–∞–Ω—Å
            users_data[user_id]['balance'] *= 2
            await update.message.reply_text(f"@{username}, —É–¥–∞—á–∞ !üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —É–¥–≤–æ–µ–Ω:  {users_data[user_id]['balance']} $KRISA!")
        else:  # 60% —à–∞–Ω—Å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–∞–º
            users_data[user_id]['balance'] = max(users_data[user_id]['balance'] // 2, 0)
            await update.message.reply_text(f"@{username}, –ø—Ä–æ–µ–±–∞–∞–ª...‚ùå –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']} $KRISA.")
    else:
        await update.message.reply_text(f"@{username}, —É —Ç–µ–±—è –Ω–µ—Ç $KRISA –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ!")
# –ö–æ–º–∞–Ω–¥–∞ /giveaway - –†–∞–∑–¥–∞—á–∞ $KRISA –Ω–∞ 5 —á–µ–ª–æ–≤–µ–∫
async def giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    creator_id = 727265381  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞
    if user_id == creator_id:
        if len(context.args) >= 1:
            try:
                amount = int(context.args[0])
            except ValueError:
                await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ $KRISA.")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if len(users_data) >= 5:
                selected_users = random.sample(list(users_data.keys()), 5)
                usernames = [f"@{users_data[uid]['username']}" for uid in selected_users]

                for uid in selected_users:
                    users_data[uid]['balance'] += amount
                
                await update.message.reply_text(f"{' '.join(usernames)}\n–≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ {amount} $KRISA!")
            else:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–∞—á–∏.")
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /giveaway <amount>")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.")

async def bonuska(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    creator_id = 727265381  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞
    if user_id == creator_id:
        if len(context.args) > 0:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π username
            target_username = context.args[0].lstrip('@')  # –£–±–∏—Ä–∞–µ–º '@' –µ—Å–ª–∏ –µ—Å—Ç—å
            target_user_id = next((uid for uid, data in users_data.items() if data['username'] == target_username), None)

            if target_user_id:
                bonuski_amount = random.randint(1, 3)
                users_data[target_user_id]['bonuski'] += bonuski_amount
                await update.message.reply_text(f"@{target_username} –ø–æ–ª—É—á–∏–ª {bonuski_amount} –±–æ–Ω—É—Å–æ–∫!")
            else:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:  # –†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–∫
            if len(users_data) >= 1:
                target_user_id = random.choice(list(users_data.keys()))
                bonuski_amount = random.randint(1, 3)
                users_data[target_user_id]['bonuski'] += bonuski_amount
                target_username = users_data[target_user_id]['username']
                await update.message.reply_text(f"@{target_username} –ø–æ–ª—É—á–∏–ª {bonuski_amount} –±–æ–Ω—É—Å–æ–∫!")
            else:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–æ–∫.")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /casino_1to10 - —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
async def casino_1to10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    # –ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
    users_data[user_id]['casino_number'] = random.randint(1, 10)
    await update.message.reply_text(f"@{username}, —è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –£–≥–∞–¥–∞–µ—à—å ‚Äî –•100 –∫ –±–∞–ª–∞–Ω—Å—É, –Ω–µ —É–≥–∞–¥–∞–µ—à—å ‚Äî –æ–±–Ω—É–ª–µ–Ω–∏–µ. –£–≥–∞–¥—ã–≤–∞–π...")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    if 'casino_number' in users_data[user_id]:
        try:
            user_guess = int(update.message.text)
        except ValueError:
            await update.message.reply_text("–û–¢ –û–î–ù–û–ì–û –î–û –î–ï–°–Ø–¢–ò!")
            return

        if 1 <= user_guess <= 10:
            correct_number = users_data[user_id]['casino_number']
            balance = users_data[user_id]['balance']

            if user_guess == correct_number:
                users_data[user_id]['balance'] *= 100
                await update.message.reply_text(f"@{username}, –ß–û–û–û–û —É–≥–∞–¥–∞–ª! –õ–æ–≤–∏ –•10 üé∞‚úÖ\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']} $KRISA!")
            else:
                users_data[user_id]['balance'] = 0
                await update.message.reply_text(f"@{username}, –±–ª–∏–∑–∫–æ, –Ω–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ... üö´\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']} $KRISA.")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
            del users_data[user_id]['casino_number']
        else:
            await update.message.reply_text("–û–¢ –û–î–ù–û–ì–û –î–û –î–ï–°–Ø–¢–ò!")

# –ö–æ–º–∞–Ω–¥–∞ /casinoWIN - —Å—Ç–∞–≤–∫–∞ 30 $KRISA –∏ –∫—Ä—É—á–µ–Ω–∏–µ
async def casinoWIN(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    initialize_user(user_id, username)

    balance = users_data[user_id]['balance']
    bonuski = users_data[user_id]['bonuski']

    if bonuski > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å–∫–∏
        users_data[user_id]['bonuski'] -= 1
        await update.message.reply_text(f"@{username}, —Å–ø–∏—Å–∞–ª 1 –±–æ–Ω—É—Å–∫—É, –Ω–∞—á–∏–Ω–∞—é –∫—Ä—É—Ç–∏—Ç—å...")
    elif balance >= 30:  # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–∫, —Å–Ω–∏–º–∞–µ–º $KRISA
        users_data[user_id]['balance'] -= 30
        await update.message.reply_text(f"@{username}, —Å–ø–∏—Å–∞–ª 30 $KRISA, –Ω–∞—á–∏–Ω–∞—é –∫—Ä—É—Ç–∏—Ç—å...")
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $KRISA –∏ –±–æ–Ω—É—Å–æ–∫
        await update.message.reply_text(
            "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç $KRISA –∏–ª–∏ –±–æ–Ω—É—Å–æ–∫.\n"
            "–ü—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å /me\n"
            "–ó–∞–±–µ—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É /tapnut"
        )
        return

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(1)

    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    outcomes = [
        "||üö´üçåüçå||",
        "||üçåüö´üö´||",
        "||üö´üö´üçå||",
        "||üö´üçåüö´||",
        "||üçåüçåüö´||",
        "||üçåüçåüçå||",  # –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        "||üö´üö´üö´||",
        "||üçåüö´üçå||"
    ]

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
    result = random.choice(outcomes)
    await update.message.reply_text(result)

    # –ï—Å–ª–∏ –≤—ã–ø–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç 6 (||üçåüçåüçå||), –¥–æ–±–∞–≤–ª—è–µ–º 300 $KRISA
    if result == "||üçåüçåüçå||":
        users_data[user_id]['balance'] += 300
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!üí∞ü§ôüèªü§ôüèª")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    bot_token = '7543069560:AAEEAVa3sd5gHOeGmMdEB31s9bg0VRQD2QM'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    application = Application.builder().token(bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("me", me))
    application.add_handler(CommandHandler("tapnut", tapnut))
    application.add_handler(CommandHandler("vivod", vivod))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("casino", casino))
    application.add_handler(CommandHandler("giveaway", giveaway))
    application.add_handler(CommandHandler("casino_1to10", casino_1to10))  # –ö–æ–º–∞–Ω–¥–∞ —Å —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º —á–∏—Å–ª–∞
    application.add_handler(CommandHandler("casinoWIN", casinoWIN))  # –ö–æ–º–∞–Ω–¥–∞ –∫–∞–∑–∏–Ω–æ —Å –±–æ–Ω—É—Å–∫–∞–º–∏
    application.add_handler(CommandHandler("bonuska", bonuska))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–æ–Ω—É—Å–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
